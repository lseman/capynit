#!/bin/bash

rescue_shell() {
    echo "$@"
    echo "Something went wrong. Dropping you to a shell."

    # sleep 20 second and reboot system
    sleep 10
    reboot -f
    #busybox --install -s
    exec /bin/bash
}


check_filesystem() {
    # most of code coming from /etc/init.d/fsck

    local fsck_opts= check_extra= RC_UNAME=$(uname -s)

    # FIXME : get_bootparam forcefsck
    if [ -e /forcefsck ]; then
        fsck_opts="$fsck_opts -f"
        check_extra="(check forced)"
    fi

    echo "CAPY: Checking local filesystem $check_extra : $1" > /dev/kmsg

    if [ "$RC_UNAME" = Linux ]; then
        fsck_opts="$fsck_opts -C0 -T"
    fi

    trap : INT QUIT

    # using our own fsck, not the builtin one from busybox
    /sbin/fsck -p $fsck_opts $1

    case $? in
        0)      echo "CAPY: rootFS clean" > /dev/kmsg; return 0;;
        1)      echo "CAPY: Filesystem repaired" > /dev/kmsg; return 0;;
        2|3)    if [ "$RC_UNAME" = Linux ]; then
                        echo "CAPY: Filesystem repaired, but reboot needed" > /dev/kmsg
                        reboot -f
                else
                        rescue_shell "Filesystem still have errors; manual fsck required"
                fi;;
        4)      if [ "$RC_UNAME" = Linux ]; then
                        rescue_shell "Fileystem errors left uncorrected, aborting"
                else
                        echo "CAPY: Filesystem repaired, but reboot needed" > /dev/kmsg
                        reboot
                fi;;
        8)      echo "CAPY: Operational error" > /dev/kmsg; return 0;;
        12)     echo "CAPY: fsck interrupted" > /dev/kmsg;;
        *)      echo "CAPY: Filesystem couldn't be fixed" > /dev/kmsg;;
    esac
    rescue_shell
}

uuidlabel_root() {
    for cmd in $(cat /proc/cmdline) ; do
        case $cmd in
        root=*)
            type=$(echo $cmd | cut -d= -f2)
            echo "Mounting rootfs"
            if [ $type == "LABEL" ] || [ $type == "UUID" ] ; then
                uuid=$(echo $cmd | cut -d= -f3)
                filesystem_root=$(findfs "$type"="$uuid")
                echo "CAPY: Mounting rootfs $filesystem_root" > /dev/kmsg
                check_filesystem $filesystem_root
                mount -o ro $filesystem_root /mnt/root
            else
                mount -o ro $(echo $cmd | cut -d= -f2) /mnt/root
            fi
            ;;
        esac
    done
}


# Function to load a module and its dependencies
load_module() {
    local module=$1
    local modulepath="/lib/modules/$(uname -r)"

    # Check if the module is already loaded
    if grep -q "^$module " /proc/modules; then
        return
    fi

    # Load the module
    #echo "CAPY: Loading $module..." > /dev/kmsg

    # if module end with .ko, remove it
    if [[ $module == *.ko ]]; then
        module=$(echo $module | sed 's/\.ko//')
    fi

    modprobe "$module"
}

# temporarily mount proc and sys
mount -t proc none /proc
mount -t sysfs none /sys
mount -t devtmpfs none /dev

# insert modules
while read -r mod_path
do
   load_module $mod_path
done < module_list.txt

ENCRYPTED_ROOTFS=
# do stuff to deal with encrypted rootfs

args=$(cat /proc/cmdline)
echo "CAPY: Capybara initramfs v0.1" > /dev/kmsg
echo "CAPY: Command line: $args" > /dev/kmsg

# mount the root filesystem, depending if the encrypt flag is set
if [ -n "$ENCRYPTED_ROOTFS" ]; then
    echo "CAPY: Encrypted rootfs detected" > /dev/kmsg
    # get uuid from /proc/cmdline
    rootfsuuid=$(cat /proc/cmdline | awk -F'UUID=' '{print $2}' | awk '{print $1}')
    echo "CAPY: rootfs uuid: $rootfsuuid" > /dev/kmsg
    # get the filesystem
    filesystem_root=$(findfs "UUID"="$rootfsuuid")
    cryptsetup open --type luks $filesystem_root luks-$rootfsuuid
    filesystem_root=/dev/mapper/luks-$rootfsuuid
    # mount the root filesystem
    mount -o ro $filesystem_root /mnt/root
else
    echo "CAPY: Unencrypted rootfs detected" > /dev/kmsg
    uuidlabel_root || rescue_shell "Error while mounting rootfs"
fi

# disable kernel messages from popping onto the screen
echo 0 > /proc/sys/kernel/printk

echo "CAPY: Good to go. Switching to the real root." > /dev/kmsg

# clean up. The init process will remount proc sys and dev later
umount /proc
umount /sys
umount /dev

ls /mnt/root
# switch to the real root and execute init
exec switch_root /mnt/root /sbin/init
